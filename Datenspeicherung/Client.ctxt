#BlueJ class context
comment0.target=Client
comment0.text=\r\n\ Stellt\ einen\ Client\ als\ Objekt\ da\ und\ erm\u00F6glicht\ die\ Kommunikation\ mit\ diesem\r\n
comment1.params=socket
comment1.target=Client(java.net.Socket)
comment1.text=\r\n\ Erzeugt\ einen\ neuen\ Client\r\n\ \u00DCbergeben\ wird\ ein\ Socket,\ welcher\ durch\ die\ Methode\ server.accept()\ erlangt\ wird\r\n
comment2.params=
comment2.target=java.lang.String\ getNextInput()
comment2.text=\r\n\ Gibt\ den\ n\u00E4chsten\ Input\ des\ Clients\ zur\u00FCck\ oder\ null,\ wenn\ kein\ weiterer\ Input\ vorhanden\ ist\r\n
comment3.params=
comment3.target=java.lang.String\ waitForNextInput()
comment3.text=\r\n\ Gibt\ den\ n\u00E4chsten\ Input\ zur\u00FCck\ und\ blockt\ den\ aktuellen\ Thread\ solange,\ bis\ neuer\ input\ vorhanden\ ist\r\n
comment4.params=
comment4.target=boolean\ alive()
comment4.text=\r\n\ \u00FCberpr\u00FCft,\ ob\ der\ Client\ noch\ mit\ dem\ Server\ verbunden\ ist,\ und\ gibt\ das\ Ergebnis\ als\ boolean\ zur\uFFFDck\r\n
comment5.params=line
comment5.target=void\ writeLine(java.lang.String)
comment5.text=\r\n\ Sendet\ dem\ Client\ eine\ Nachricht\r\n
comment6.params=
comment6.target=java.net.InetAddress\ getIp()
comment6.text=\r\n\ Gibt\ die\ IP-Adresse\ des\ Clients\ zur\u00FCck\r\n
comment7.params=username
comment7.target=void\ setUsername(java.lang.String)
comment7.text=\r\n\ Setzt\ dem\ Nutzer\ einen\ (neuen)\ Username\r\n
comment8.params=
comment8.target=java.lang.String\ getUsername()
comment8.text=\r\n\ Gibt\ den\ Usernamen\ zur\u00FCck\r\n
numComments=9
